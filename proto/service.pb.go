// Code generated by protoc-gen-go.
// source: proto/service.proto
// DO NOT EDIT!

/*
Package service is a generated protocol buffer package.

It is generated from these files:
	proto/service.proto

It has these top-level messages:
	ResourceRequest
	ResourceReservation
	ResourceUnit
	ReservationGroup
*/
package service

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
const _ = proto.ProtoPackageIsVersion1

type ResourceRequest struct {
	Uid string `protobuf:"bytes,1,opt,name=uid" json:"uid,omitempty"`
}

func (m *ResourceRequest) Reset()                    { *m = ResourceRequest{} }
func (m *ResourceRequest) String() string            { return proto.CompactTextString(m) }
func (*ResourceRequest) ProtoMessage()               {}
func (*ResourceRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type ResourceReservation struct {
	Uid string `protobuf:"bytes,1,opt,name=uid" json:"uid,omitempty"`
}

func (m *ResourceReservation) Reset()                    { *m = ResourceReservation{} }
func (m *ResourceReservation) String() string            { return proto.CompactTextString(m) }
func (*ResourceReservation) ProtoMessage()               {}
func (*ResourceReservation) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type ResourceUnit struct {
	Cpu    int32 `protobuf:"varint,1,opt,name=cpu" json:"cpu,omitempty"`
	Memory int32 `protobuf:"varint,2,opt,name=memory" json:"memory,omitempty"`
	Disk   int64 `protobuf:"varint,3,opt,name=disk" json:"disk,omitempty"`
}

func (m *ResourceUnit) Reset()                    { *m = ResourceUnit{} }
func (m *ResourceUnit) String() string            { return proto.CompactTextString(m) }
func (*ResourceUnit) ProtoMessage()               {}
func (*ResourceUnit) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

// A group of machines that each of them can provide the resource specified in resource_unit.
type ReservationGroup struct {
	ResourceUnit *ResourceUnit `protobuf:"bytes,1,opt,name=resource_unit,json=resourceUnit" json:"resource_unit,omitempty"`
	Machines     []string      `protobuf:"bytes,2,rep,name=machines" json:"machines,omitempty"`
}

func (m *ReservationGroup) Reset()                    { *m = ReservationGroup{} }
func (m *ReservationGroup) String() string            { return proto.CompactTextString(m) }
func (*ReservationGroup) ProtoMessage()               {}
func (*ReservationGroup) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *ReservationGroup) GetResourceUnit() *ResourceUnit {
	if m != nil {
		return m.ResourceUnit
	}
	return nil
}

func init() {
	proto.RegisterType((*ResourceRequest)(nil), "service.ResourceRequest")
	proto.RegisterType((*ResourceReservation)(nil), "service.ResourceReservation")
	proto.RegisterType((*ResourceUnit)(nil), "service.ResourceUnit")
	proto.RegisterType((*ReservationGroup)(nil), "service.ReservationGroup")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion1

// Client API for ResourceManager service

type ResourceManagerClient interface {
	Reserve(ctx context.Context, in *ResourceRequest, opts ...grpc.CallOption) (*ResourceReservation, error)
}

type resourceManagerClient struct {
	cc *grpc.ClientConn
}

func NewResourceManagerClient(cc *grpc.ClientConn) ResourceManagerClient {
	return &resourceManagerClient{cc}
}

func (c *resourceManagerClient) Reserve(ctx context.Context, in *ResourceRequest, opts ...grpc.CallOption) (*ResourceReservation, error) {
	out := new(ResourceReservation)
	err := grpc.Invoke(ctx, "/service.ResourceManager/Reserve", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ResourceManager service

type ResourceManagerServer interface {
	Reserve(context.Context, *ResourceRequest) (*ResourceReservation, error)
}

func RegisterResourceManagerServer(s *grpc.Server, srv ResourceManagerServer) {
	s.RegisterService(&_ResourceManager_serviceDesc, srv)
}

func _ResourceManager_Reserve_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(ResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(ResourceManagerServer).Reserve(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _ResourceManager_serviceDesc = grpc.ServiceDesc{
	ServiceName: "service.ResourceManager",
	HandlerType: (*ResourceManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Reserve",
			Handler:    _ResourceManager_Reserve_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}

var fileDescriptor0 = []byte{
	// 241 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0x12, 0x2e, 0x28, 0xca, 0x2f,
	0xc9, 0xd7, 0x2f, 0x4e, 0x2d, 0x2a, 0xcb, 0x4c, 0x4e, 0xd5, 0x03, 0xf3, 0x84, 0xd8, 0xa1, 0x5c,
	0x25, 0x65, 0x2e, 0xfe, 0xa0, 0xd4, 0xe2, 0xfc, 0xd2, 0xa2, 0xe4, 0xd4, 0xa0, 0xd4, 0xc2, 0xd2,
	0xd4, 0xe2, 0x12, 0x21, 0x01, 0x2e, 0xe6, 0xd2, 0xcc, 0x14, 0x09, 0x46, 0x05, 0x46, 0x0d, 0xce,
	0x20, 0x10, 0x53, 0x49, 0x9d, 0x4b, 0x18, 0xa1, 0x08, 0xa4, 0x33, 0xb1, 0x24, 0x33, 0x3f, 0x0f,
	0x8b, 0x42, 0x1f, 0x2e, 0x1e, 0x98, 0xc2, 0xd0, 0xbc, 0x4c, 0xb0, 0x51, 0xc9, 0x05, 0xa5, 0x60,
	0x15, 0xac, 0x41, 0x20, 0xa6, 0x90, 0x18, 0x17, 0x5b, 0x6e, 0x6a, 0x6e, 0x7e, 0x51, 0xa5, 0x04,
	0x13, 0x58, 0x10, 0xca, 0x13, 0x12, 0xe2, 0x62, 0x49, 0xc9, 0x2c, 0xce, 0x96, 0x60, 0x06, 0x8a,
	0x32, 0x07, 0x81, 0xd9, 0x4a, 0x59, 0x5c, 0x02, 0x48, 0xd6, 0xb9, 0x17, 0xe5, 0x97, 0x16, 0x08,
	0x59, 0x71, 0xf1, 0x16, 0x41, 0x6d, 0x88, 0x2f, 0x05, 0x5a, 0x01, 0x36, 0x9b, 0xdb, 0x48, 0x54,
	0x0f, 0xe6, 0x3f, 0x64, 0xfb, 0x83, 0x78, 0x8a, 0x90, 0x5d, 0x23, 0xc5, 0xc5, 0x91, 0x9b, 0x98,
	0x9c, 0x91, 0x99, 0x97, 0x5a, 0x0c, 0xb4, 0x9d, 0x19, 0xe8, 0x68, 0x38, 0xdf, 0x28, 0x0c, 0x11,
	0x0e, 0xbe, 0x89, 0x79, 0x89, 0xe9, 0xa9, 0x45, 0x42, 0xce, 0x5c, 0xec, 0x10, 0xeb, 0x53, 0x85,
	0x24, 0x30, 0x8c, 0x87, 0x06, 0x96, 0x94, 0x0c, 0x16, 0x19, 0xb8, 0x93, 0x95, 0x18, 0x92, 0xd8,
	0xc0, 0xe1, 0x6d, 0x0c, 0x08, 0x00, 0x00, 0xff, 0xff, 0x79, 0x4e, 0x84, 0xc6, 0x86, 0x01, 0x00,
	0x00,
}
